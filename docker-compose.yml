services:
  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: mysql8_container
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
#      - ./dockerized/sql:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: localdb
      MYSQL_USER: localuser
      MYSQL_PASSWORD: localpassword
      MYSQL_HOST: mysql8_container
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Service
  django:
    build:
      context: ./stack/django
      dockerfile: Dockerfile
    container_name: django-service
    volumes:
      - $HOME/.ssl:/root/.ssl
      - ./stack/django:/app/django
      - ./stack/django/__pycache__:/app/django/__pycache__:cached  # Speed up reloads
      #    - ./dockerized/django/media:/app/django/media  # Single, unified media directory
    environment:
      DJANGO_DEBUG: "True"
      DJANGO_ENV: "development"
      REACT_APP_API_HOST: "https://localapi.oaexample.com:8080"
      REACT_APP_APP_HOST: "https://localhost.oaexample.com:3000"
      OA_ENV_DB: "docker"
      OA_ENV_EMAIL: "gmail"
      OA_ENV_STORAGE: "local"
    env_file:
      - ./stack/django/.env
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8080:8080"
    extra_hosts:
      - "localapi.oaexample.com:127.0.0.1"

  # ReactJS Frontend Service
  reactjs:
    build:
      context: ./stack/reactjs
      dockerfile: Dockerfile
    container_name: reactjs-service
    volumes:
      - ./stack/reactjs:/app/reactjs
      - $HOME/.ssl:/root/.ssl
    depends_on:
      django:
        condition: service_started
    ports:
      - "3000:3000"
    extra_hosts:
      - "localhost.oaexample.com:127.0.0.1"

  # Fake data generator
  databuilder:
    build:
      context: ./stack/databuilder
      dockerfile: Dockerfile
    container_name: databuilder-service
    volumes:
      - ./stack/databuilder:/app/databuilder
    depends_on:
      django:
        condition: service_started
    environment:
      REACT_APP_API_HOST: "https://localapi.oaexample.com:8080"  # Access Django API


  # Front-end end-to-end testing
  cypress:
    build:
      context: ./stack/cypress
      dockerfile: Dockerfile
    container_name: cypress-service
    env_file:
      - ./stack/cypress/.env
    volumes:
      - ./stack/cypress:/app/cypress
    depends_on:
      reactjs:
        condition: service_started
    environment:
      REACT_APP_APP_HOST: "https://localhost.oaexample.com:3000"  # Access ReactJS app during tests


volumes:
  mysql-data:
